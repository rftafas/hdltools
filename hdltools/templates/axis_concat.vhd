---------------------------------------------------------------------------------------------------------
-- This code and it autogenerated outputs are provided under LGPL by Ricardo Tafas.                    --
-- What does that mean? That you get it for free as long as you give back all good stiff you add to it.--
-- You can download more VHDL stuff at https://github.com/rftafas                                      --
---------------------------------------------------------------------------------------------------------
library ieee;
  use ieee.std_logic_1164.all;
  use ieee.numeric_std.all;

entity axis_concat is
    generic (
      tdata_size   : integer := 8;
      tdest_size   : integer := 8;
      tuser_size   : integer := 8
    );
    port (
      clk_i       : in  std_logic;
      rst_i       : in  std_logic;
      --python port code
      m_tready_i   : in  std_logic;
      m_tvalid_o   : out std_logic;
      m_tlast_o    : out std_logic

    );
end axis_concat;

architecture behavioral of axis_concat is

--python constant code

  constant all1_c : std_logic_vector(number_ports-1 downto 0) := (others=>'1');

  type axi_tdata_array is array (number_ports-1 downto 0) of std_logic_vector(tdata_size-1 downto 0);
  type axi_tuser_array is array (number_ports-1 downto 0) of std_logic_vector(tuser_size-1 downto 0);
  type axi_tdest_array is array (number_ports-1 downto 0) of std_logic_vector(tdest_size-1 downto 0);

  signal axi_tdata_s : axi_tdata_array;
  signal axi_tuser_s : axi_tuser_array;
  signal axi_tdest_s : axi_tdest_array;

  signal s_tvalid_s : std_logic_vector(number_ports-1 downto 0);
  signal  s_tlast_s : std_logic_vector(number_ports-1 downto 0);
  signal s_tready_s : std_logic_vector(number_ports-1 downto 0);

begin

--python signal connections

  out_gen : for j in number_ports-1 downto 0 generate
    m_tdata_o((number_ports+1)*tdata_size-1 downto number_ports*tdata_size)  <= axi_tdata_s(j);
    m_tuser_o((number_ports+1)*tuser_size-1 downto number_ports*tuser_size)  <= axi_tuser_s(j);
    m_tdest_o((number_ports+1)*tdest_size-1 downto number_ports*tdest_size)  <= axi_tdest_s(j);
  end generate;

  --if every master port have a valid data, we present valid data. Same for tlast.
  m_tvalid_o <= '1' when s_tvalid_s = all1_c else '0';
  m_tlast_o  <= '1' when  s_tlast_s = all1_c else '0';


end behavioral;
