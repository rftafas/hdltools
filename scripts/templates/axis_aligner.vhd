---------------------------------------------------------------------------------------------------------
-- This code and it autogenerated outputs are provided under LGPL by Ricardo Tafas.                    --
-- What does that mean? That you get it for free as long as you give back all good stiff you add to it.--
-- You can download more VHDL stuff at https://github.com/rftafas                                      --
---------------------------------------------------------------------------------------------------------
library ieee;
  use ieee.std_logic_1164.all;
  use ieee.numeric_std.all;
library stdblocks;
  use std_blocks.sync_lib.all;

entity axis_aligner is
    generic (
      tdata_size     : integer := 8;
      tdest_size     : integer := 8;
      tuser_size     : integer := 8
    );
    port (
      clk_i       : in  std_logic;
      rst_i       : in  std_logic;
      --python port code
    );
end axis_aligner;

architecture behavioral of axis_aligner is

--python constant code

  constant all1_c : std_logic_vector(number_ports-1 downto 0) := (others=>'1');

  type axi_tdata_array is array (number_ports-1 downto 0) of std_logic_vector(tdata_size-1 downto 0);
  type axi_tuser_array is array (number_ports-1 downto 0) of std_logic_vector(tuser_size-1 downto 0);
  type axi_tdest_array is array (number_ports-1 downto 0) of std_logic_vector(tdest_size-1 downto 0);

  signal s_tdata_s  : axi_tdata_array;
  signal s_tuser_s  : axi_tuser_array;
  signal s_tdest_s  : axi_tdest_array;
  signal s_tvalid_s : std_logic_vector(number_ports-1 downto 0);
  signal s_tlast_s  : std_logic_vector(number_ports-1 downto 0);
  signal s_tready_s : std_logic_vector(number_ports-1 downto 0);

  signal m_tdata_s  : axi_tdata_array;
  signal m_tuser_s  : axi_tuser_array;
  signal m_tdest_s  : axi_tdest_array;
  signal m_tvalid_s : std_logic_vector(number_ports-1 downto 0);
  signal m_tlast_s  : std_logic_vector(number_ports-1 downto 0);
  signal m_tready_s : std_logic_vector(number_ports-1 downto 0);

  signal ready_s    : std_logic_vector(number_ports-1 downto 0);

begin

--python signal connections

----------------------------------------------------------------------------------------------------

  en_i_s(j)     <= s_tvalid_s(j) and ready_s(j);
  s_tready_s(j) <= en_o_s(j);
  m_tvalid_s(j) <= en_o_s(j);

  pulse_align_i : pulse_align
  generic map (
    port_size => number_ports
  )
  port map (
    rst_i  => rst_i,
    mclk_i => clk_i,
    en_i   => en_i_s,
    en_o   => en_o_s
  );

  ready_gen : for j in number_ports-1 downto 0 generate
    det_down_i : det_down
      port map (
        mclk_i => clk_i,
        rst_i  => rst_i,
        din    => m_tready_s,
        dout   => ready_s
      );
  end generate;


end behavioral;
