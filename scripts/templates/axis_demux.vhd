---------------------------------------------------------------------------------------------------------
-- This code and it autogenerated outputs are provided under LGPL by Ricardo Tafas.                    --
-- What does that mean? That you get it for free as long as you give back all good stiff you add to it.--
-- You can download more VHDL stuff at https://github.com/rftafas                                      --
---------------------------------------------------------------------------------------------------------
library ieee;
  use ieee.std_logic_1164.all;
  use ieee.numeric_std.all;
library expert;
  use expert.std_logic_expert.all;

entity axis_demux is
    generic (
      tdata_size   : integer := 8;
      tdest_size   : integer := 8;
      tuser_size   : integer := 8;
      select_auto  : boolean := false;
      switch_tlast : boolean := false;
      max_tx_size  : integer := 10
    );
    port (
      clk_i       : in  std_logic;
      rst_i       : in  std_logic;
      --python port code
      --AXIS Slave Port
      s_tdata_i  : in  std_logic_vector(tdata_size-1 downto 0);
      s_tuser_i  : in  std_logic_vector(tuser_size-1 downto 0);
      s_tdest_i  : in  std_logic_vector(tdest_size-1 downto 0);
      s_tready_o : out std_logic;
      s_tvalid_i : in  std_logic;
      s_tlast_i  : in  std_logic
    );
end axis_demux;

architecture behavioral of axis_demux is

--python constant code

  constant all1_c : std_logic_vector(number_masters-1 downto 0) := (others=>'1');

  type axi_tdata_array is array (number_masters-1 downto 0) of std_logic_vector(tdata_size-1 downto 0);
  type axi_tuser_array is array (number_masters-1 downto 0) of std_logic_vector(tuser_size-1 downto 0);
  type axi_tdest_array is array (number_masters-1 downto 0) of std_logic_vector(tdest_size-1 downto 0);

  signal m_tdata_s : axi_tdata_array;
  signal m_tuser_s : axi_tuser_array;
  signal m_tdest_s : axi_tdest_array;

  signal m_tvalid_s : std_logic_vector(number_masters-1 downto 0);
  signal  m_tlast_s : std_logic_vector(number_masters-1 downto 0);
  signal m_tready_s : std_logic_vector(number_masters-1 downto 0);

begin

--array connections

  out_gen : for j in number_masters-1 downto 0 generate
    m_tdata_s(j)  <= s_tdata_i;--  when to_integer(s_tdest_i) = j else (others=>'0');
    m_tuser_s(j)  <= s_tuser_i;--  when to_integer(s_tdest_i) = j else (others=>'0');
    m_tdest_s(j)  <= s_tdest_i;--  when to_integer(s_tdest_i) = j else (others=>'0');
    m_tlast_s(j)  <= s_tlast_i;--  when to_integer(s_tdest_i) = j else '0';
    m_tvalid_s(j) <= s_tvalid_i;-- when to_integer(s_tdest_i) = j else '0';
  end generate;

  s_tready_o <= m_tready_s(to_integer(s_tdest_i));

end behavioral;
