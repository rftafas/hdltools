----------------------------------------------------------------------------------
-- This block was autogenerated with axis.py
-- If you want to change number of ports, use:
-- python axis.py create concat 'entity name' '# of ports'
----------------------------------------------------------------------------------
library ieee;
  use ieee.std_logic_1164.all;
  use ieee.numeric_std.all;
library expert;
	use expert.std_logic_expert.all;

entity intercon2 is
    generic (
      tdata_size   : integer := 8;
      tdest_size   : integer := 8;
      tuser_size   : integer := 8;
      select_auto  : boolean := false;
      switch_tlast : boolean := false;
      interleaving : boolean := false;
      max_tx_size  : integer := 10;
      mode         : integer := 10
    );
    port (
      --general
      clk_i       : in  std_logic;
      rst_i       : in  std_logic;
      --AXIS Master Port 0
      m0_tdata_o    : out std_logic_vector(tdata_size-1 downto 0);
      m0_tuser_o    : out std_logic_vector(tuser_size-1 downto 0);
      m0_tdest_o    : out std_logic_vector(tdest_size-1 downto 0);
      m0_tready_i   : in  std_logic;
      m0_tvalid_o   : out std_logic;
      m0_tlast_o    : out std_logic;
      --AXIS Master Port 1
      m1_tdata_o    : out std_logic_vector(tdata_size-1 downto 0);
      m1_tuser_o    : out std_logic_vector(tuser_size-1 downto 0);
      m1_tdest_o    : out std_logic_vector(tdest_size-1 downto 0);
      m1_tready_i   : in  std_logic;
      m1_tvalid_o   : out std_logic;
      m1_tlast_o    : out std_logic;
      --AXIS Slave Port 0
      s0_tdata_i  : in  std_logic_vector(tdata_size-1 downto 0);
      s0_tuser_i  : in  std_logic_vector(tuser_size-1 downto 0);
      s0_tdest_i  : in  std_logic_vector(tdest_size-1 downto 0);
      s0_tready_o : out std_logic;
      s0_tvalid_i : in  std_logic;
      s0_tlast_i  : in  std_logic;
      --AXIS Slave Port 1
      s1_tdata_i  : in  std_logic_vector(tdata_size-1 downto 0);
      s1_tuser_i  : in  std_logic_vector(tuser_size-1 downto 0);
      s1_tdest_i  : in  std_logic_vector(tdest_size-1 downto 0);
      s1_tready_o : out std_logic;
      s1_tvalid_i : in  std_logic;
      s1_tlast_i  : in  std_logic
    );
end intercon2;

architecture behavioral of intercon2 is

  constant number_masters : integer := 2;
  constant number_slaves  : integer := 2;

  component intercon2_demux is
    generic (
      tdata_size   : integer := 8;
      tdest_size   : integer := 8;
      tuser_size   : integer := 8;
      select_auto  : boolean := false;
      switch_tlast : boolean := false;
      max_tx_size  : integer := 10
    );
    port (
      --general
      clk_i      : in  std_logic;
      rst_i      : in  std_logic;
      --AXIS Master Port 0
      m0_tdata_o    : out std_logic_vector(tdata_size-1 downto 0);
      m0_tuser_o    : out std_logic_vector(tuser_size-1 downto 0);
      m0_tdest_o    : out std_logic_vector(tdest_size-1 downto 0);
      m0_tready_i   : in  std_logic;
      m0_tvalid_o   : out std_logic;
      m0_tlast_o    : out std_logic;
      --AXIS Master Port 1
      m1_tdata_o    : out std_logic_vector(tdata_size-1 downto 0);
      m1_tuser_o    : out std_logic_vector(tuser_size-1 downto 0);
      m1_tdest_o    : out std_logic_vector(tdest_size-1 downto 0);
      m1_tready_i   : in  std_logic;
      m1_tvalid_o   : out std_logic;
      m1_tlast_o    : out std_logic;
      --AXIS Master port
      s_tdata_i  : in  std_logic_vector(tdata_size-1 downto 0);
      s_tuser_i  : in  std_logic_vector(tuser_size-1 downto 0);
      s_tdest_i  : in  std_logic_vector(tdest_size-1 downto 0);
      s_tready_o : out std_logic;
      s_tvalid_i : in  std_logic;
      s_tlast_i  : in  std_logic
    );
  end component;

  component intercon2_mux is
    generic (
      tdata_size   : integer := 8;
      tdest_size   : integer := 8;
      tuser_size   : integer := 8;
      select_auto  : boolean := false;
      switch_tlast : boolean := false;
      interleaving : boolean := false;
      max_tx_size  : integer := 10;
      mode         : integer := 10
      );
    port (
      --general
      clk_i       : in  std_logic;
      rst_i       : in  std_logic;
      --AXIS Slave Port 0
      s0_tdata_i  : in  std_logic_vector(tdata_size-1 downto 0);
      s0_tuser_i  : in  std_logic_vector(tuser_size-1 downto 0);
      s0_tdest_i  : in  std_logic_vector(tdest_size-1 downto 0);
      s0_tready_o : out std_logic;
      s0_tvalid_i : in  std_logic;
      s0_tlast_i  : in  std_logic;
      --AXIS Slave Port 1
      s1_tdata_i  : in  std_logic_vector(tdata_size-1 downto 0);
      s1_tuser_i  : in  std_logic_vector(tuser_size-1 downto 0);
      s1_tdest_i  : in  std_logic_vector(tdest_size-1 downto 0);
      s1_tready_o : out std_logic;
      s1_tvalid_i : in  std_logic;
      s1_tlast_i  : in  std_logic;
      --AXIS Master port
      m_tdata_o    : out std_logic_vector(tdata_size-1 downto 0);
      m_tuser_o    : out std_logic_vector(tuser_size-1 downto 0);
      m_tdest_o    : out std_logic_vector(tdest_size-1 downto 0);
      m_tready_i   : in  std_logic;
      m_tvalid_o   : out std_logic;
      m_tlast_o    : out std_logic
    );
  end component;

  type axi_tdata_array is array (natural range <>) of std_logic_vector(tdata_size-1 downto 0);
  type axi_tuser_array is array (natural range <>) of std_logic_vector(tuser_size-1 downto 0);
  type axi_tdest_array is array (natural range <>) of std_logic_vector(tdest_size-1 downto 0);

  type axi_signal_array is array (natural range <>) of std_logic_vector(number_slaves-1 downto 0);

  --connection to entity port
  signal s_tdata_s  :  axi_tdata_array(number_slaves-1 downto 0);
  signal s_tuser_s  :  axi_tuser_array(number_slaves-1 downto 0);
  signal s_tdest_s  :  axi_tdest_array(number_slaves-1 downto 0);
  signal s_tvalid_s : std_logic_vector(number_slaves-1 downto 0);
  signal s_tlast_s  : std_logic_vector(number_slaves-1 downto 0);
  signal s_tready_s : std_logic_vector(number_slaves-1 downto 0);

  signal m_tdata_s  :  axi_tdata_array(number_masters-1 downto 0);
  signal m_tuser_s  :  axi_tuser_array(number_masters-1 downto 0);
  signal m_tdest_s  :  axi_tdest_array(number_masters-1 downto 0);
  signal m_tvalid_s : std_logic_vector(number_masters-1 downto 0);
  signal m_tlast_s  : std_logic_vector(number_masters-1 downto 0);
  signal m_tready_s : std_logic_vector(number_masters-1 downto 0);

  signal demux0_tdata_s  :  axi_tdata_array(number_slaves-1 downto 0);
  signal demux0_tuser_s  :  axi_tuser_array(number_slaves-1 downto 0);
  signal demux0_tdest_s  :  axi_tdest_array(number_slaves-1 downto 0);
  signal demux0_tvalid_s : std_logic_vector(number_slaves-1 downto 0);
  signal demux0_tlast_s  : std_logic_vector(number_slaves-1 downto 0);
  signal demux0_tready_s : std_logic_vector(number_slaves-1 downto 0);
  signal demux1_tdata_s  :  axi_tdata_array(number_slaves-1 downto 0);
  signal demux1_tuser_s  :  axi_tuser_array(number_slaves-1 downto 0);
  signal demux1_tdest_s  :  axi_tdest_array(number_slaves-1 downto 0);
  signal demux1_tvalid_s : std_logic_vector(number_slaves-1 downto 0);
  signal demux1_tlast_s  : std_logic_vector(number_slaves-1 downto 0);
  signal demux1_tready_s : std_logic_vector(number_slaves-1 downto 0);

  signal mux0_tdata_s  :  axi_tdata_array(number_masters-1 downto 0);
  signal mux0_tuser_s  :  axi_tuser_array(number_masters-1 downto 0);
  signal mux0_tdest_s  :  axi_tdest_array(number_masters-1 downto 0);
  signal mux0_tvalid_s : std_logic_vector(number_masters-1 downto 0);
  signal mux0_tlast_s  : std_logic_vector(number_masters-1 downto 0);
  signal mux0_tready_s : std_logic_vector(number_masters-1 downto 0);
  signal mux1_tdata_s  :  axi_tdata_array(number_masters-1 downto 0);
  signal mux1_tuser_s  :  axi_tuser_array(number_masters-1 downto 0);
  signal mux1_tdest_s  :  axi_tdest_array(number_masters-1 downto 0);
  signal mux1_tvalid_s : std_logic_vector(number_masters-1 downto 0);
  signal mux1_tlast_s  : std_logic_vector(number_masters-1 downto 0);
  signal mux1_tready_s : std_logic_vector(number_masters-1 downto 0);

begin

  --Master Connections
  --Master 0
  m0_tvalid_o <= m_tvalid_s(0);
  m0_tlast_o  <= m_tlast_s(0);
  m_tready_s(0) <= m0_tready_i;
  m0_tdata_o  <= m_tdata_s(0);
  m0_tuser_o  <= m_tuser_s(0);
  m0_tdest_o  <= m_tdest_s(0);
  
  --Master 1
  m1_tvalid_o <= m_tvalid_s(1);
  m1_tlast_o  <= m_tlast_s(1);
  m_tready_s(1) <= m1_tready_i;
  m1_tdata_o  <= m_tdata_s(1);
  m1_tuser_o  <= m_tuser_s(1);
  m1_tdest_o  <= m_tdest_s(1);
  
  --Slave Connections
  --Slave 0
  s_tvalid_s(0) <= s0_tvalid_i;
  s_tlast_s(0)  <= s0_tlast_i;
  s0_tready_o  <= s_tready_s(0);
  s_tdata_s(0)  <= s0_tdata_i;
  s_tuser_s(0)  <= s0_tuser_i;
  s_tdest_s(0)  <= s0_tdest_i;
  
  --Slave 1
  s_tvalid_s(1) <= s1_tvalid_i;
  s_tlast_s(1)  <= s1_tlast_i;
  s1_tready_o  <= s_tready_s(1);
  s_tdata_s(1)  <= s1_tdata_i;
  s_tuser_s(1)  <= s1_tuser_i;
  s_tdest_s(1)  <= s1_tdest_i;
  
  --Connext demux0 to mux0
  demux0_tvalid_s(0) <= mux0_tvalid_s(0);
  demux0_tlast_s(0)  <=  mux0_tlast_s(0);
  mux0_tready_s(0) <= demux0_tready_s(0);
  demux0_tdata_s(0)  <=  mux0_tdata_s(0);
  demux0_tuser_s(0)  <=  mux0_tuser_s(0);
  demux0_tdest_s(0)  <=  mux0_tdest_s(0);
  
  --Connext demux0 to mux1
  demux0_tvalid_s(1) <= mux1_tvalid_s(0);
  demux0_tlast_s(1)  <=  mux1_tlast_s(0);
  mux1_tready_s(0) <= demux0_tready_s(1);
  demux0_tdata_s(1)  <=  mux1_tdata_s(0);
  demux0_tuser_s(1)  <=  mux1_tuser_s(0);
  demux0_tdest_s(1)  <=  mux1_tdest_s(0);
  
  --Connext demux1 to mux0
  demux1_tvalid_s(0) <= mux0_tvalid_s(1);
  demux1_tlast_s(0)  <=  mux0_tlast_s(1);
  mux0_tready_s(1) <= demux1_tready_s(0);
  demux1_tdata_s(0)  <=  mux0_tdata_s(1);
  demux1_tuser_s(0)  <=  mux0_tuser_s(1);
  demux1_tdest_s(0)  <=  mux0_tdest_s(1);
  
  --Connext demux1 to mux1
  demux1_tvalid_s(1) <= mux1_tvalid_s(1);
  demux1_tlast_s(1)  <=  mux1_tlast_s(1);
  mux1_tready_s(1) <= demux1_tready_s(1);
  demux1_tdata_s(1)  <=  mux1_tdata_s(1);
  demux1_tuser_s(1)  <=  mux1_tuser_s(1);
  demux1_tdest_s(1)  <=  mux1_tdest_s(1);
  


  mux_gen : for j in number_masters-1 downto 0 generate
    intercon2_mux_u : intercon2_mux
      generic map (
        tdata_size   => tdata_size,
        tdest_size   => tdest_size,
        tuser_size   => tuser_size,
        select_auto  => select_auto,
        switch_tlast => switch_tlast,
        interleaving => interleaving,
        max_tx_size  => max_tx_size,
        mode         => mode
      )
      port map (
        clk_i      => clk_i,
        rst_i      => rst_i,
        --Slave s0
        s0_tvalid_i => mux0_tvalid_s(j),
        s0_tlast_i  =>  mux0_tlast_s(j),
        s0_tready_o => mux0_tready_s(j),
        s0_tdata_i  =>  mux0_tdata_s(j),
        s0_tuser_i  =>  mux0_tuser_s(j),
        s0_tdest_i  =>  mux0_tdest_s(j),
        
        --Slave s1
        s1_tvalid_i => mux1_tvalid_s(j),
        s1_tlast_i  =>  mux1_tlast_s(j),
        s1_tready_o => mux1_tready_s(j),
        s1_tdata_i  =>  mux1_tdata_s(j),
        s1_tuser_i  =>  mux1_tuser_s(j),
        s1_tdest_i  =>  mux1_tdest_s(j),
        
        m_tdata_o  => m_tdata_s(j),
        m_tuser_o  => m_tuser_s(j),
        m_tdest_o  => m_tdest_s(j),
        m_tready_i => m_tready_s(j),
        m_tvalid_o => m_tvalid_s(j),
        m_tlast_o  => m_tlast_s(j)
      );

  end generate;

  demux_gen : for j in number_slaves-1 downto 0 generate

    intercon2_demux_u : intercon2_demux
      generic map (
        tdata_size   => tdata_size,
        tdest_size   => tdest_size,
        tuser_size   => tuser_size,
        select_auto  => select_auto,
        switch_tlast => switch_tlast,
        max_tx_size  => max_tx_size
      )
      port map (
        clk_i      => clk_i,
        rst_i      => rst_i,
        --Master m0
        m0_tvalid_o => demux0_tvalid_s(j),
        m0_tlast_o  =>  demux0_tlast_s(j),
        m0_tready_i => demux0_tready_s(j),
        m0_tdata_o  =>  demux0_tdata_s(j),
        m0_tuser_o  =>  demux0_tuser_s(j),
        m0_tdest_o  =>  demux0_tdest_s(j),
        
        --Master m1
        m1_tvalid_o => demux1_tvalid_s(j),
        m1_tlast_o  =>  demux1_tlast_s(j),
        m1_tready_i => demux1_tready_s(j),
        m1_tdata_o  =>  demux1_tdata_s(j),
        m1_tuser_o  =>  demux1_tuser_s(j),
        m1_tdest_o  =>  demux1_tdest_s(j),
        
        s_tdata_i  => s_tdata_s(j),
        s_tuser_i  => s_tuser_s(j),
        s_tdest_i  => s_tdest_s(j),
        s_tready_o => s_tready_s(j),
        s_tvalid_i => s_tvalid_s(j),
        s_tlast_i  => s_tlast_s(j)
      );

    end generate;

end behavioral;
