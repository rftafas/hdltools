---------------------------------------------------------------------------------------------------------
-- This code and it autogenerated outputs are provided under LGPL by Ricardo Tafas.                    --
-- What does that mean? That you get it for free as long as you give back all good stiff you add to it.--
-- You can download more VHDL stuff at https://github.com/rftafas                                      --
---------------------------------------------------------------------------------------------------------
library ieee;
  use ieee.std_logic_1164.all;
  use ieee.numeric_std.all;
library stdblocks;
  use std_blocks.sync_lib.all;

entity aligner2 is
    generic (
      tdata_size     : integer := 8;
      tdest_size     : integer := 8;
      tuser_size     : integer := 8
    );
    port (
      clk_i       : in  std_logic;
      rst_i       : in  std_logic;
        --AXIS Master Port 0
      m0_tdata_o    : out std_logic_vector(tdata_size-1 downto 0);
      m0_tuser_o    : out std_logic_vector(tuser_size-1 downto 0);
      m0_tdest_o    : out std_logic_vector(tdest_size-1 downto 0);
      m0_tready_i   : in  std_logic;
      m0_tvalid_o   : out std_logic;
      m0_tlast_o    : out std_logic;
      --AXIS Master Port 1
      m1_tdata_o    : out std_logic_vector(tdata_size-1 downto 0);
      m1_tuser_o    : out std_logic_vector(tuser_size-1 downto 0);
      m1_tdest_o    : out std_logic_vector(tdest_size-1 downto 0);
      m1_tready_i   : in  std_logic;
      m1_tvalid_o   : out std_logic;
      m1_tlast_o    : out std_logic;
        --AXIS Slave Port 0
      s0_tdata_i  : in  std_logic_vector(tdata_size-1 downto 0);
      s0_tuser_i  : in  std_logic_vector(tuser_size-1 downto 0);
      s0_tdest_i  : in  std_logic_vector(tdest_size-1 downto 0);
      s0_tready_o : out std_logic;
      s0_tvalid_i : in  std_logic;
      s0_tlast_i  : in  std_logic;
      --AXIS Slave Port 1
      s1_tdata_i  : in  std_logic_vector(tdata_size-1 downto 0);
      s1_tuser_i  : in  std_logic_vector(tuser_size-1 downto 0);
      s1_tdest_i  : in  std_logic_vector(tdest_size-1 downto 0);
      s1_tready_o : out std_logic;
      s1_tvalid_i : in  std_logic;
      s1_tlast_i  : in  std_logic;
    );
end aligner2;

architecture behavioral of aligner2 is

  constant number_ports : integer := 2;

  constant all1_c : std_logic_vector(number_ports-1 downto 0) := (others=>'1');

  type axi_tdata_array is array (number_ports-1 downto 0) of std_logic_vector(tdata_size-1 downto 0);
  type axi_tuser_array is array (number_ports-1 downto 0) of std_logic_vector(tuser_size-1 downto 0);
  type axi_tdest_array is array (number_ports-1 downto 0) of std_logic_vector(tdest_size-1 downto 0);

  signal s_tdata_s  : axi_tdata_array;
  signal s_tuser_s  : axi_tuser_array;
  signal s_tdest_s  : axi_tdest_array;
  signal s_tvalid_s : std_logic_vector(number_ports-1 downto 0);
  signal s_tlast_s  : std_logic_vector(number_ports-1 downto 0);
  signal s_tready_s : std_logic_vector(number_ports-1 downto 0);

  signal m_tdata_s  : axi_tdata_array;
  signal m_tuser_s  : axi_tuser_array;
  signal m_tdest_s  : axi_tdest_array;
  signal m_tvalid_s : std_logic_vector(number_ports-1 downto 0);
  signal m_tlast_s  : std_logic_vector(number_ports-1 downto 0);
  signal m_tready_s : std_logic_vector(number_ports-1 downto 0);

  signal ready_s    : std_logic_vector(number_ports-1 downto 0);

begin

  --Master Connections
  --Master 0
  m0_tvalid_o <= m_tvalid_s(0);
  m0_tlast_o  <= m_tlast_s(0);
  m_tready_s(0) <= m0_tready_i;
  m0_tdata_o  <= m_tdata_s(0);
  m0_tuser_o  <= m_tuser_s(0);
  m0_tdest_o  <= m_tdest_s(0);
  
  --Master 1
  m1_tvalid_o <= m_tvalid_s(1);
  m1_tlast_o  <= m_tlast_s(1);
  m_tready_s(1) <= m1_tready_i;
  m1_tdata_o  <= m_tdata_s(1);
  m1_tuser_o  <= m_tuser_s(1);
  m1_tdest_o  <= m_tdest_s(1);
  
  --Slave Connections
  --Slave 0
  s_tvalid_s(0) <= s0_tvalid_i;
  s_tlast_s(0)  <= s0_tlast_i;
  s0_tready_o  <= s_tready_s(0);
  s_tdata_s(0)  <= s0_tdata_i;
  s_tuser_s(0)  <= s0_tuser_i;
  s_tdest_s(0)  <= s0_tdest_i;
  
  --Slave 1
  s_tvalid_s(1) <= s1_tvalid_i;
  s_tlast_s(1)  <= s1_tlast_i;
  s1_tready_o  <= s_tready_s(1);
  s_tdata_s(1)  <= s1_tdata_i;
  s_tuser_s(1)  <= s1_tuser_i;
  s_tdest_s(1)  <= s1_tdest_i;
  

----------------------------------------------------------------------------------------------------

  en_i_s(j)     <= s_tvalid_s(j) and ready_s(j);
  s_tready_s(j) <= en_o_s(j);
  m_tvalid_s(j) <= en_o_s(j);

  pulse_align_i : pulse_align
  generic map (
    port_size => number_ports
  )
  port map (
    rst_i  => rst_i,
    mclk_i => clk_i,
    en_i   => en_i_s,
    en_o   => en_o_s
  );

  ready_gen : for j in number_ports-1 downto 0 generate
    det_down_i : det_down
      port map (
        mclk_i => clk_i,
        rst_i  => rst_i,
        din    => m_tready_s,
        dout   => ready_s
      );
  end generate;


end behavioral;
